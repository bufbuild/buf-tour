// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file pet/v1/pet.proto (package pet.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { DateTime } from "../../google/type/datetime_pb.js";

/**
 * PetType represents the different types of pets in the pet store.
 *
 * @generated from enum pet.v1.PetType
 */
export enum PetType {
  /**
   * @generated from enum value: PET_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PET_TYPE_CAT = 1;
   */
  CAT = 1,

  /**
   * @generated from enum value: PET_TYPE_DOG = 2;
   */
  DOG = 2,

  /**
   * @generated from enum value: PET_TYPE_SNAKE = 3;
   */
  SNAKE = 3,

  /**
   * @generated from enum value: PET_TYPE_HAMSTER = 4;
   */
  HAMSTER = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(PetType)
proto3.util.setEnumType(PetType, "pet.v1.PetType", [
  { no: 0, name: "PET_TYPE_UNSPECIFIED" },
  { no: 1, name: "PET_TYPE_CAT" },
  { no: 2, name: "PET_TYPE_DOG" },
  { no: 3, name: "PET_TYPE_SNAKE" },
  { no: 4, name: "PET_TYPE_HAMSTER" },
]);

/**
 * Pet represents a pet in the pet store.
 *
 * @generated from message pet.v1.Pet
 */
export class Pet extends Message<Pet> {
  /**
   * @generated from field: pet.v1.PetType pet_type = 1;
   */
  petType = PetType.UNSPECIFIED;

  /**
   * @generated from field: string pet_id = 2;
   */
  petId = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: google.type.DateTime created_at = 4;
   */
  createdAt?: DateTime;

  constructor(data?: PartialMessage<Pet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "pet.v1.Pet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pet_type", kind: "enum", T: proto3.getEnumType(PetType) },
    { no: 2, name: "pet_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "created_at", kind: "message", T: DateTime },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pet {
    return new Pet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pet {
    return new Pet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pet {
    return new Pet().fromJsonString(jsonString, options);
  }

  static equals(a: Pet | PlainMessage<Pet> | undefined, b: Pet | PlainMessage<Pet> | undefined): boolean {
    return proto3.util.equals(Pet, a, b);
  }
}

/**
 * @generated from message pet.v1.GetPetRequest
 */
export class GetPetRequest extends Message<GetPetRequest> {
  /**
   * @generated from field: string pet_id = 1;
   */
  petId = "";

  constructor(data?: PartialMessage<GetPetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "pet.v1.GetPetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pet_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPetRequest {
    return new GetPetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPetRequest {
    return new GetPetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPetRequest {
    return new GetPetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPetRequest | PlainMessage<GetPetRequest> | undefined, b: GetPetRequest | PlainMessage<GetPetRequest> | undefined): boolean {
    return proto3.util.equals(GetPetRequest, a, b);
  }
}

/**
 * @generated from message pet.v1.GetPetResponse
 */
export class GetPetResponse extends Message<GetPetResponse> {
  /**
   * @generated from field: pet.v1.Pet pet = 1;
   */
  pet?: Pet;

  constructor(data?: PartialMessage<GetPetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "pet.v1.GetPetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pet", kind: "message", T: Pet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPetResponse {
    return new GetPetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPetResponse {
    return new GetPetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPetResponse {
    return new GetPetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPetResponse | PlainMessage<GetPetResponse> | undefined, b: GetPetResponse | PlainMessage<GetPetResponse> | undefined): boolean {
    return proto3.util.equals(GetPetResponse, a, b);
  }
}

/**
 * @generated from message pet.v1.PutPetRequest
 */
export class PutPetRequest extends Message<PutPetRequest> {
  /**
   * @generated from field: pet.v1.PetType pet_type = 1;
   */
  petType = PetType.UNSPECIFIED;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<PutPetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "pet.v1.PutPetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pet_type", kind: "enum", T: proto3.getEnumType(PetType) },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PutPetRequest {
    return new PutPetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PutPetRequest {
    return new PutPetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PutPetRequest {
    return new PutPetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PutPetRequest | PlainMessage<PutPetRequest> | undefined, b: PutPetRequest | PlainMessage<PutPetRequest> | undefined): boolean {
    return proto3.util.equals(PutPetRequest, a, b);
  }
}

/**
 * @generated from message pet.v1.PutPetResponse
 */
export class PutPetResponse extends Message<PutPetResponse> {
  /**
   * @generated from field: pet.v1.Pet pet = 1;
   */
  pet?: Pet;

  constructor(data?: PartialMessage<PutPetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "pet.v1.PutPetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pet", kind: "message", T: Pet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PutPetResponse {
    return new PutPetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PutPetResponse {
    return new PutPetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PutPetResponse {
    return new PutPetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PutPetResponse | PlainMessage<PutPetResponse> | undefined, b: PutPetResponse | PlainMessage<PutPetResponse> | undefined): boolean {
    return proto3.util.equals(PutPetResponse, a, b);
  }
}

/**
 * @generated from message pet.v1.DeletePetRequest
 */
export class DeletePetRequest extends Message<DeletePetRequest> {
  /**
   * @generated from field: string pet_id = 1;
   */
  petId = "";

  constructor(data?: PartialMessage<DeletePetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "pet.v1.DeletePetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pet_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePetRequest {
    return new DeletePetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePetRequest {
    return new DeletePetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePetRequest {
    return new DeletePetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePetRequest | PlainMessage<DeletePetRequest> | undefined, b: DeletePetRequest | PlainMessage<DeletePetRequest> | undefined): boolean {
    return proto3.util.equals(DeletePetRequest, a, b);
  }
}

/**
 * @generated from message pet.v1.DeletePetResponse
 */
export class DeletePetResponse extends Message<DeletePetResponse> {
  constructor(data?: PartialMessage<DeletePetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "pet.v1.DeletePetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePetResponse {
    return new DeletePetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePetResponse {
    return new DeletePetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePetResponse {
    return new DeletePetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePetResponse | PlainMessage<DeletePetResponse> | undefined, b: DeletePetResponse | PlainMessage<DeletePetResponse> | undefined): boolean {
    return proto3.util.equals(DeletePetResponse, a, b);
  }
}

